[{"path":"https://r-lib.github.io/sparsevctrs/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 sparsevctrs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/articles/design.html","id":"altrep-functions","dir":"Articles","previous_headings":"","what":"Altrep Functions","title":"Design behind sparsevctrs","text":"functions sparse_double() relatives used construct sparse vectors noted type. work need 4 pieces information: values positions length default (defaults 0) values need match type function name easily coerced type (double -> integer). positions integers doubles can losslessly turned integers. length single non-negative integer-like value. Values positions paired, thus expected length, furthermore, positions expected sorted increasing order duplicates. ordering done let various extraction methods work efficiently possible. functions quite strict input checking choice, allow inner workings efficient possible. input functions mirrors values stored ALTREP class produce.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/articles/design.html","id":"converting-functions","dir":"Articles","previous_headings":"","what":"Converting Functions","title":"Design behind sparsevctrs","text":"3 functions fall category: coerce_to_sparse_data_frame() coerce_to_sparse_tibble() coerce_to_sparse_matrix() first two take sparse matrix Matrix package produce data.frame/tibble sparse columns. last one takes data.frame/tibble sparse columns produces sparse matrix using Matrix package. functions expected inverse , coerce_to_sparse_matrix(coerce_to_sparse_data_frame(x)) returns x back. made highly performant terms speed memory consumption, Meaning sparsity applied appropriate. functions quite strict input checking choice, allow inner workings efficient possible. part data.frames sparse vectors different can’t used coerce_to_sparse_matrix() yet.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/articles/design.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper Functions","title":"Design behind sparsevctrs","text":"3 types helper functions. First, is_* family functions. specific is_sparse_double() general is_sparse_vector() can used way determine whether vector ALTREP sparse vector. otherwise hard tell .numeric() can’t tell difference. Secondly, extraction functions. sparse_values() sparse_positions(). extract values positions respectively, without materializing whole dense vector. functions made work non-sparse vectors well make ergonomic user. Internally call is_sparse_vector(), choice return something useful alternative wasn’t hard. sparse_length() function length() works types last type helper function less clearly defined expanded needed. functions provide alternatives functions don’t ALTREP support. mean(). Calling mean() sparse vector force materialization, calculate mean. memory inefficient calculated like . functions, starting name prefix sparse_*, made work non-sparse vectors reasons listed regarding ergonomic use.","code":"sum(sparse_values(x)) / length(x)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/articles/design.html","id":"faq","dir":"Articles","previous_headings":"","what":"FAQ","title":"Design behind sparsevctrs","text":"aren’t results returned {vctrs} classes? stands right now, viewed beneficial users alerted vectors expected used internally packages rarely end user. Furthermore sparse vectors produce result dense vectors class() big plus. package try replace {Matrix} package? . sparse vector types provided package mimic created Matrix::sparseVector(). work different types allow different defaults. None matrix operations reimplemented .","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/articles/when-to-use.html","id":"base-size-of-objects","dir":"Articles","previous_headings":"","what":"Base size of objects","title":"When to use sparse vectors","text":"One differences sparse dense vectors much memory take . value computed offset plus linear effect based number values. integer vector length 0 takes 48 B exist. additional value adds another 4 B average. effect linear, integer vector 1000 elements takes 48 B + 1000 * 4 B = 4048 B, integer vector 2000 elements takes 48 B + 2000 * 4 B = 8048 B . vectors contained value 0. can replicate sparsely sparse_integer(integer(), integer(), length = 0). see size 0-length sparse integer vector size 888 B. value size sparse vector, regardless long . happening sparse vectors keep track non-default values.","code":"obj_size(integer(0)) #> 48 B obj_size(integer(1000)) #> 4.05 kB obj_size(integer(2000)) #> 8.05 kB obj_size(integer(3000)) #> 12.05 kB obj_size(sparse_integer(integer(), integer(), length = 0)) #> 888 B obj_size(sparse_integer(integer(), integer(), length = 0)) #> 888 B obj_size(sparse_integer(integer(), integer(), length = 1000)) #> 888 B obj_size(sparse_integer(integer(), integer(), length = 2000)) #> 888 B obj_size(sparse_integer(integer(), integer(), length = 3000)) #> 888 B"},{"path":"https://r-lib.github.io/sparsevctrs/dev/articles/when-to-use.html","id":"keeping-dense-data-in-a-sparse-format","dir":"Articles","previous_headings":"","what":"Keeping dense data in a sparse format","title":"When to use sparse vectors","text":"dense integer vector size, regardless values takes sparse integer counterpart hand increase non-default need store. comes trade-. Dense integer vectors size 210 less smaller sparse counterparts matter . Dense integer vector vectors 211 elements take amount memory sparse counterpart values. values can calculate memory equivalent vectors determine efficient, noting sparse vectors increase size twice non-default value dense counterpart. vector length 1000, sparse vector equivalent size 210 non-default values. values continue go .","code":"dense_x <- integer(1000) obj_size(dense_x) #> 4.05 kB  dense_x[1:100] <- 1:100 obj_size(dense_x) #> 4.05 kB sparse_x <- sparse_integer(integer(), integer(), 1000) obj_size(sparse_x) #> 888 B  sparse_x <- sparse_integer(1:100, 1:100, 1000) obj_size(sparse_x) #> 2.07 kB  sparse_x <- sparse_integer(1:200, 1:200, 1000) obj_size(sparse_x) #> 2.47 kB"},{"path":"https://r-lib.github.io/sparsevctrs/dev/articles/when-to-use.html","id":"conversion-speed","dir":"Articles","previous_headings":"","what":"Conversion speed","title":"When to use sparse vectors","text":"everything life, deal tradeoffs. main tradeoff see using package memory allocation minimized allow workflows otherwise possible. mind, times using sparse vectors ideal. main one converting back forth dense sparse vectors takes non-zero amount time. Generally, won’t see benefit forced materialize sparse vector. one example. dense_fun() sparse_fun() creates numeric vector, length x, value x last element. Calling [] ALTREP vector forces materialize, now can look much slower create sparse vector go back.  staying dense whole time faster matter speed. comparison, can look much time takes don’t force materialization.  really seeing creating sparse vector takes near-constant amount time. length high enough wins. isn’t good comparison vectors useless unless something . sparse vectors shine can use sparse-aware methods. One example min(), max() sum() numeric ALTREP vectors. functions special hooks trigger implementations don’t require materialization. thus quite well.  functions well calculate sum non-default values instead values. truly sparse vectors fast. hand, methods don’t ALTREP support. Trying use triggers materialization allow calculations progress. unsupported method mean().  see sparse always slower. can handled sparse-aware calculations. helper functions sparse_positions() sparse_values() can used combination functions work sparse vectors without materialize . assumption default = 0, can write mean method sparse vectors sum(sparse_values(x)) / length(x). Using formulation allows us work fast avoiding materialization.  ideal usage sparse vectors keep data.frame tibble, use coerce_to_sparse_matrix() end create sparse matrix understood downstream functions.","code":"dense_fun <- function(x) {   res <- numeric(x)   res[x] <- x   res }  sparse_fun <- function(x) {   res <- sparse_double(x, x, x)   res[] }  bench::press(   x = c(10, 100, 1000, 10000, 100000, 1000000),   {     bench::mark(       dense = dense_fun(x),       sparse = sparse_fun(x)     )   } ) |>   autoplot() dense_fun <- function(x) {   res <- numeric(x)   res[x] <- x   res }  sparse_fun <- function(x) {   res <- sparse_double(x, x, x)   res }  bench::press(   x = c(10, 100, 1000, 10000, 100000, 1000000),   {     bench::mark(       dense = dense_fun(x),       sparse = sparse_fun(x)     )   } ) |>   autoplot() dense_fun <- function(x) {   res <- numeric(x)   res[x] <- x   res }  sparse_fun <- function(x) {   res <- sparse_double(x, x, x)   res }  bench::press(   x = c(10, 100, 1000, 10000, 100000, 1000000),   {     dense_x <- dense_fun(x)     sparse_x <- sparse_fun(x)     bench::mark(       dense = sum(dense_x),       sparse = sum(sparse_x)     )   } ) |>   autoplot() dense_fun <- function(x) {   res <- numeric(x)   res[x] <- x   res }  sparse_fun <- function(x) {   res <- sparse_double(x, x, x)   res }  bench::press(   x = c(10, 100, 1000, 10000, 100000, 1000000),   {     dense_x <- dense_fun(x)     sparse_x <- sparse_fun(x)     bench::mark(       dense = mean(dense_x),       sparse = mean(sparse_x)     )   } ) |>   autoplot() dense_fun <- function(x) {   res <- numeric(x)   res[x] <- x   res }  sparse_fun <- function(x) {   res <- sparse_double(x, x, x)   res }  sparse_mean <- function(x) {   sum(sparse_values(x)) / length(x) }  bench::press(   x = c(10, 100, 1000, 10000, 100000, 1000000),   {     dense_x <- dense_fun(x)     sparse_x <- sparse_fun(x)     bench::mark(       dense = mean(dense_x),       sparse = sparse_mean(sparse_x)     )   } ) |>   autoplot()"},{"path":"https://r-lib.github.io/sparsevctrs/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author, maintainer. Davis Vaughan. Contributor. . Copyright holder, funder.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E (2024). sparsevctrs: Sparse Vectors Use Data Frames. R package version 0.1.0.9002, https://r-lib.github.io/sparsevctrs/, https://github.com/r-lib/sparsevctrs.","code":"@Manual{,   title = {sparsevctrs: Sparse Vectors for Use in Data Frames},   author = {Emil Hvitfeldt},   year = {2024},   note = {R package version 0.1.0.9002,     https://r-lib.github.io/sparsevctrs/},   url = {https://github.com/r-lib/sparsevctrs}, }"},{"path":"https://r-lib.github.io/sparsevctrs/dev/index.html","id":"sparsevctrs-","dir":"","previous_headings":"","what":"Sparse Vectors for Use in Data Frames","title":"Sparse Vectors for Use in Data Frames","text":"goal sparsevctrs provide sparse vector ALTREP class. , can sparse data form sparse columns data.frame tibble. Due nature ALTREP vectors work, sparse vectors behave like normal dense vectors used . vectors contain sparseness much can, materialize .","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sparse Vectors for Use in Data Frames","text":"can install development version sparsevctrs like :","code":"remotes::install_github(\"r-lib/sparsevctrs\")"},{"path":"https://r-lib.github.io/sparsevctrs/dev/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Sparse Vectors for Use in Data Frames","text":"sparse vector, specifically sparse double vector, identical dense counterpart, often smaller memory footprint. memory sparse vector proportional number elements plus constant. means increasing length sparse vector doesn’t increase much memory uses. Unlike dense vectors much smaller constant, increases according length values. sparse vectors compatible tibbles data frames.","code":"library(sparsevctrs) library(lobstr)  x_sparse <- sparse_double(value = c(3, 1, 10), position = c(2, 7, 15), length = 1000) x_dense <- numeric(1000) x_dense[2] <- 3 x_dense[7] <- 1 x_dense[15] <- 10  obj_size(x_sparse) #> 936 B obj_size(x_dense) #> 8.05 kB  identical(x_sparse, x_dense) #> [1] TRUE x_sparse_0 <- sparse_double(numeric(), integer(), length = 0) x_sparse_1000 <- sparse_double(numeric(), integer(), length = 1000) x_sparse_1000000 <- sparse_double(numeric(), integer(), length = 10000000)  obj_size(x_sparse_0) #> 888 B obj_size(x_sparse_1000) #> 888 B obj_size(x_sparse_1000000) #> 888 B  x_dense_0 <- numeric(0) x_dense_1000 <- numeric(1000) x_dense_1000000 <- numeric(10000000)  obj_size(x_dense_0) #> 48 B obj_size(x_dense_1000) #> 8.05 kB obj_size(x_dense_1000000) #> 80.00 MB library(tibble) set.seed(1234)  tibble(   x = sample(1:1000),   y = sparse_double(1, 7, 1000) ) #> # A tibble: 1,000 × 2 #>        x     y #>    <int> <dbl> #>  1   284     0 #>  2   848     0 #>  3   918     0 #>  4   101     0 #>  5   623     0 #>  6   905     0 #>  7   645     1 #>  8   934     0 #>  9   400     0 #> 10   900     0 #> # ℹ 990 more rows"},{"path":"https://r-lib.github.io/sparsevctrs/dev/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Sparse Vectors for Use in Data Frames","text":"Sparse data happens ingestion preprocessing calculations. text counts, dummy variables etc etc computational tools calculations using sparse matrices, specifically Matrix package modeling packages (e.g., xgboost, glmnet, etc.). want utilize tools best can without making redundant implementations. However, sparse matrices great data general, least end, mathematical calculations occur. Converting everything “numeric” problematic dates, factors, etc. good reasons data frames created first place. Matrices efficient primitive. problem many tools, especially tidyverse, rely data frames since expressive accommodate different variable types. need merge filter rows/columns, etc, flexible user-friendly way. (joins, pivoting) sparse representation data allows us use modern data manipulation interfaces, keeps memory overhead low, can efficiently converted primitive matrix format can let Matrix packages best. achieved package, providing sparse vectors fit data frame. Along converting tools sparse matrices data frames.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce-vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce numeric vector to sparse double — coerce-vector","title":"Coerce numeric vector to sparse double — coerce-vector","text":"Takes numeric vector, integer double, turn sparse double vector.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce-vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce numeric vector to sparse double — coerce-vector","text":"","code":"as_sparse_double(x, default = 0)  as_sparse_integer(x, default = 0L)  as_sparse_character(x, default = \"\")  as_sparse_logical(x, default = FALSE)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce-vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce numeric vector to sparse double — coerce-vector","text":"x numeric vector. default default value use. Defaults 0. values x must double integer. must contain Inf NaN values.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce-vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce numeric vector to sparse double — coerce-vector","text":"sparse vectors","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce-vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce numeric vector to sparse double — coerce-vector","text":"","code":"x_dense <- c(3, 0, 2, 0, 0, 0, 4, 0, 0, 0) x_sparse <- as_sparse_double(x_dense) x_sparse #>  [1] 3 0 2 0 0 0 4 0 0 0  is_sparse_double(x_sparse)  #> [1] TRUE"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"Turning sparse matrix data frame","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"","code":"coerce_to_sparse_data_frame(x, call = rlang::caller_env(0))"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"x sparse matrix. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"data.frame sparse columns","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_data_frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"requirement sparse matrix contains column names.","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce sparse matrix to data frame with sparse columns — coerce_to_sparse_data_frame","text":"","code":"set.seed(1234) mat <- matrix(sample(0:1, 100, TRUE, c(0.9, 0.1)), nrow = 10) colnames(mat) <- letters[1:10] sparse_mat <- Matrix::Matrix(mat, sparse = TRUE) sparse_mat #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]] #>                           #>  [1,] . . . . . . . . 1 . #>  [2,] . . . . . . . . . 1 #>  [3,] . . . . . . . . . . #>  [4,] . 1 . . . . . . . . #>  [5,] . . . . . . . . . . #>  [6,] . . . . . . . . . . #>  [7,] . . . . . . . . . . #>  [8,] . . 1 . . . . . . . #>  [9,] . . . 1 . . . . . . #> [10,] . . . . . . . . . .  res <- coerce_to_sparse_data_frame(sparse_mat) res #>    a b c d e f g h i j #> 1  0 0 0 0 0 0 0 0 1 0 #> 2  0 0 0 0 0 0 0 0 0 1 #> 3  0 0 0 0 0 0 0 0 0 0 #> 4  0 1 0 0 0 0 0 0 0 0 #> 5  0 0 0 0 0 0 0 0 0 0 #> 6  0 0 0 0 0 0 0 0 0 0 #> 7  0 0 0 0 0 0 0 0 0 0 #> 8  0 0 1 0 0 0 0 0 0 0 #> 9  0 0 0 1 0 0 0 0 0 0 #> 10 0 0 0 0 0 0 0 0 0 0  # All columns are sparse vapply(res, is_sparse_vector, logical(1)) #>    a    b    c    d    e    f    g    h    i    j  #> TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"Turning data frame sparse columns sparse matrix using Matrix::sparseMatrix().","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"","code":"coerce_to_sparse_matrix(x, call = rlang::caller_env(0))"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"x data frame tibble sparse columns. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"sparse matrix","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"checking currently x determine whether contains sparse columns . Thus works data frame. Needless say, creating sparse matrix dense data frame ideal.","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce sparse data frame to sparse matrix — coerce_to_sparse_matrix","text":"","code":"sparse_tbl <- lapply(1:10, function(x) sparse_double(x, x, length = 10)) names(sparse_tbl) <- letters[1:10] sparse_tbl <- as.data.frame(sparse_tbl) sparse_tbl #>    a b c d e f g h i  j #> 1  1 0 0 0 0 0 0 0 0  0 #> 2  0 2 0 0 0 0 0 0 0  0 #> 3  0 0 3 0 0 0 0 0 0  0 #> 4  0 0 0 4 0 0 0 0 0  0 #> 5  0 0 0 0 5 0 0 0 0  0 #> 6  0 0 0 0 0 6 0 0 0  0 #> 7  0 0 0 0 0 0 7 0 0  0 #> 8  0 0 0 0 0 0 0 8 0  0 #> 9  0 0 0 0 0 0 0 0 9  0 #> 10 0 0 0 0 0 0 0 0 0 10  res <- coerce_to_sparse_matrix(sparse_tbl) res #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]] #>                            #>  [1,] 1 . . . . . . . .  . #>  [2,] . 2 . . . . . . .  . #>  [3,] . . 3 . . . . . .  . #>  [4,] . . . 4 . . . . .  . #>  [5,] . . . . 5 . . . .  . #>  [6,] . . . . . 6 . . .  . #>  [7,] . . . . . . 7 . .  . #>  [8,] . . . . . . . 8 .  . #>  [9,] . . . . . . . . 9  . #> [10,] . . . . . . . . . 10"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"Turning sparse matrix tibble.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"","code":"coerce_to_sparse_tibble(x, call = rlang::caller_env(0))"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"x sparse matrix. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"tibble sparse columns","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"requirement sparse matrix contains column names.","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/coerce_to_sparse_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce sparse matrix to tibble with sparse columns — coerce_to_sparse_tibble","text":"","code":"set.seed(1234) mat <- matrix(sample(0:1, 100, TRUE, c(0.9, 0.1)), nrow = 10) colnames(mat) <- letters[1:10] sparse_mat <- Matrix::Matrix(mat, sparse = TRUE) sparse_mat #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]] #>                           #>  [1,] . . . . . . . . 1 . #>  [2,] . . . . . . . . . 1 #>  [3,] . . . . . . . . . . #>  [4,] . 1 . . . . . . . . #>  [5,] . . . . . . . . . . #>  [6,] . . . . . . . . . . #>  [7,] . . . . . . . . . . #>  [8,] . . 1 . . . . . . . #>  [9,] . . . 1 . . . . . . #> [10,] . . . . . . . . . .  res <- coerce_to_sparse_tibble(sparse_mat) res #> # A tibble: 10 × 10 #>        a     b     c     d     e     f     g     h     i     j #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1     0     0     0     0     0     0     0     0     1     0 #>  2     0     0     0     0     0     0     0     0     0     1 #>  3     0     0     0     0     0     0     0     0     0     0 #>  4     0     1     0     0     0     0     0     0     0     0 #>  5     0     0     0     0     0     0     0     0     0     0 #>  6     0     0     0     0     0     0     0     0     0     0 #>  7     0     0     0     0     0     0     0     0     0     0 #>  8     0     0     1     0     0     0     0     0     0     0 #>  9     0     0     0     1     0     0     0     0     0     0 #> 10     0     0     0     0     0     0     0     0     0     0  # All columns are sparse vapply(res, is_sparse_vector, logical(1)) #>    a    b    c    d    e    f    g    h    i    j  #> TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/extractors.html","id":null,"dir":"Reference","previous_headings":"","what":"Information extraction from sparse vectors — extractors","title":"Information extraction from sparse vectors — extractors","text":"Extract positions, values, default sparse vectors without need materialize vector.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/extractors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information extraction from sparse vectors — extractors","text":"","code":"sparse_positions(x)  sparse_values(x)  sparse_default(x)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/extractors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information extraction from sparse vectors — extractors","text":"x vector extracted .","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/extractors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information extraction from sparse vectors — extractors","text":"vectors requested attributes","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/extractors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information extraction from sparse vectors — extractors","text":"sparse_default() returns NA applied non-sparse vectors. done indicator non-sparsity. ease use, functions also works non-sparse variables.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/extractors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information extraction from sparse vectors — extractors","text":"","code":"x_sparse <- sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 10) x_dense <- c(0, pi, 0, 0, 0.5, 0, 0, 0, 0, 0.1)  sparse_positions(x_sparse) #> [1]  2  5 10 sparse_values(x_sparse) #> [1] 3.141593 5.000000 0.100000 sparse_default(x_sparse) #> [1] 0  sparse_positions(x_dense) #>  [1]  1  2  3  4  5  6  7  8  9 10 sparse_values(x_dense) #>  [1] 0.000000 3.141593 0.000000 0.000000 0.500000 0.000000 0.000000 #>  [8] 0.000000 0.000000 0.100000 sparse_default(x_dense) #> [1] NA  x_sparse_3 <- sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 10, default = 3) sparse_default(x_sparse_3) #> [1] 3"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/has_sparse_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for sparse elements — has_sparse_elements","title":"Check for sparse elements — has_sparse_elements","text":"function checks see data.frame, tibble list contains one sparse vectors.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/has_sparse_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for sparse elements — has_sparse_elements","text":"","code":"has_sparse_elements(x)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/has_sparse_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for sparse elements — has_sparse_elements","text":"x data frame, tibble, list.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/has_sparse_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for sparse elements — has_sparse_elements","text":"single logical value.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/has_sparse_elements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for sparse elements — has_sparse_elements","text":"checking function done using is_sparse_vector(), implemented using early exit pattern provide fast performance wide data.frames. function test whether x data.frame, tibble list. simply iterates elements sees sparse vectors.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/has_sparse_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for sparse elements — has_sparse_elements","text":"","code":"set.seed(1234) n_cols <- 10000 mat <- matrix(sample(0:1, n_cols * 10, TRUE, c(0.9, 0.1)), ncol = n_cols) colnames(mat) <- as.character(seq_len(n_cols)) sparse_mat <- Matrix::Matrix(mat, sparse = TRUE)  res <- coerce_to_sparse_tibble(sparse_mat) has_sparse_elements(res) #> [1] TRUE  has_sparse_elements(mtcars) #> [1] FALSE"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sparse character vector — sparse_character","title":"Create sparse character vector — sparse_character","text":"Construction vectors values positions recorded. Length default values determine information.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sparse character vector — sparse_character","text":"","code":"sparse_character(values, positions, length, default = \"\")"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sparse character vector — sparse_character","text":"values integer vector, values non-zero entries. positions integer vector, indices non-zero entries. length integer value, Length vector. default integer value, value indices specified positions. Defaults \"\". NA.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create sparse character vector — sparse_character","text":"sparse character vector","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_character.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sparse character vector — sparse_character","text":"values positions expected length, allowed zero length. Allowed values value character values. Missing values NA NA_real_ allowed turned NA_character_. Everything else disallowed. values also allowed take value default. positions integers integer-like doubles. Everything else allowed. Positions furthermore positive (0 allowed), unique, increasing order. Lastly smaller length. developers: setting options(\"sparsevctrs.verbose_materialize\" = TRUE) print message time sparse vector forced materialize.","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sparse character vector — sparse_character","text":"","code":"sparse_character(character(), integer(), 10) #>  [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"  sparse_character(c(\"A\", \"C\", \"E\"), c(2, 5, 10), 10) #>  [1] \"\"  \"A\" \"\"  \"\"  \"C\" \"\"  \"\"  \"\"  \"\"  \"E\"  str(   sparse_character(c(\"A\", \"C\", \"E\"), c(2, 5, 10), 1000000000) ) #>  chr [1:1000000000] \"\" \"A\" \"\" \"\" \"C\" \"\" \"\" \"\" \"\" \"E\" \"\" \"\" \"\" \"\" \"\" ..."},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_double.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sparse double vector — sparse_double","title":"Create sparse double vector — sparse_double","text":"Construction vectors values positions recorded. Length default values determine information.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_double.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sparse double vector — sparse_double","text":"","code":"sparse_double(values, positions, length, default = 0)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_double.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sparse double vector — sparse_double","text":"values double vector, values non-zero entries. positions integer vector, indices non-zero entries. length integer value, Length vector. default double value, value indices specified positions. Defaults 0. NA.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_double.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create sparse double vector — sparse_double","text":"sparse double vector","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_double.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sparse double vector — sparse_double","text":"values positions expected length, allowed zero length. Allowed values value double integer values. integer values coerced doubles. Missing values NA NA_real_ allowed. Everything else disallowed, includes Inf NaN. values also allowed take value default. positions integers integer-like doubles. Everything else allowed. Positions furthermore positive (0 allowed), unique, increasing order. Lastly smaller length. developers: setting options(\"sparsevctrs.verbose_materialize\" = TRUE) print message time sparse vector forced materialize.","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_double.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sparse double vector — sparse_double","text":"","code":"sparse_double(numeric(), integer(), 10) #>  [1] 0 0 0 0 0 0 0 0 0 0  sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 10) #>  [1] 0.000000 3.141593 0.000000 0.000000 5.000000 0.000000 0.000000 #>  [8] 0.000000 0.000000 0.100000  str(   sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 1000000000) ) #>  num [1:1000000000] 0 3.14 0 0 5 ..."},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate sparse dummy variables — sparse_dummy","title":"Generate sparse dummy variables — sparse_dummy","text":"Generate sparse dummy variables","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate sparse dummy variables — sparse_dummy","text":"","code":"sparse_dummy(x, one_hot = TRUE)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate sparse dummy variables — sparse_dummy","text":"x factor. one_hot single logical value. first factor level included . Defaults FALSE.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_dummy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate sparse dummy variables — sparse_dummy","text":"list sparse integer dummy variables.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_dummy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate sparse dummy variables — sparse_dummy","text":"factor variables can used sparse_dummy(). call .factor() required type data. single level present one_hot takes effect. vector produced sparse. missing value ith element produce missing values dummy variables thr ith position.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_dummy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate sparse dummy variables — sparse_dummy","text":"","code":"x <- factor(c(\"a\", \"a\", \"b\", \"c\", \"d\", \"b\"))  sparse_dummy(x, one_hot = FALSE) #> $b #> [1] 0 0 1 0 0 1 #>  #> $c #> [1] 0 0 0 1 0 0 #>  #> $d #> [1] 0 0 0 0 1 0 #>   x <- factor(c(\"a\", \"a\", \"b\", \"c\", \"d\", \"b\"))  sparse_dummy(x, one_hot = TRUE) #> $a #> [1] 1 1 0 0 0 0 #>  #> $b #> [1] 0 0 1 0 0 1 #>  #> $c #> [1] 0 0 0 1 0 0 #>  #> $d #> [1] 0 0 0 0 1 0 #>   x <- factor(c(\"a\", NA, \"b\", \"c\", \"d\", NA))  sparse_dummy(x, one_hot = FALSE) #> $b #> [1]  0 NA  1  0  0 NA #>  #> $c #> [1]  0 NA  0  1  0 NA #>  #> $d #> [1]  0 NA  0  0  1 NA #>   x <- factor(c(\"a\", NA, \"b\", \"c\", \"d\", NA))  sparse_dummy(x, one_hot = TRUE) #> $a #> [1]  1 NA  0  0  0 NA #>  #> $b #> [1]  0 NA  1  0  0 NA #>  #> $c #> [1]  0 NA  0  1  0 NA #>  #> $d #> [1]  0 NA  0  0  1 NA #>"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sparse integer vector — sparse_integer","title":"Create sparse integer vector — sparse_integer","text":"Construction vectors values positions recorded. Length default values determine information.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sparse integer vector — sparse_integer","text":"","code":"sparse_integer(values, positions, length, default = 0L)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sparse integer vector — sparse_integer","text":"values integer vector, values non-zero entries. positions integer vector, indices non-zero entries. length integer value, Length vector. default integer value, value indices specified positions. Defaults 0L. NA.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create sparse integer vector — sparse_integer","text":"sparse integer vector","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_integer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sparse integer vector — sparse_integer","text":"values positions expected length, allowed zero length. Allowed values value integer values. means double vector c(1, 5, 4) accepted can losslessly converted integer vector c(1L, 5L, 4L). Missing values NA NA_real_ allowed. Everything else disallowed, includes Inf NaN. values also allowed take value default. positions integers integer-like doubles. Everything else allowed. Positions furthermore positive (0 allowed), unique, increasing order. Lastly smaller length. developers: setting options(\"sparsevctrs.verbose_materialize\" = TRUE) print message time sparse vector forced materialize.","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sparse integer vector — sparse_integer","text":"","code":"sparse_integer(integer(), integer(), 10) #>  [1] 0 0 0 0 0 0 0 0 0 0  sparse_integer(c(4, 5, 7), c(2, 5, 10), 10) #>  [1] 0 4 0 0 5 0 0 0 0 7  str(   sparse_integer(c(4, 5, 7), c(2, 5, 10), 1000000000) ) #>  int [1:1000000000] 0 4 0 0 5 0 0 0 0 7 ..."},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sparse logical vector — sparse_logical","title":"Create sparse logical vector — sparse_logical","text":"Construction vectors values positions recorded. Length default values determine information.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sparse logical vector — sparse_logical","text":"","code":"sparse_logical(values, positions, length, default = FALSE)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sparse logical vector — sparse_logical","text":"values logical vector, values non-zero entries. positions integer vector, indices non-zero entries. length integer value, Length vector. default logical value, value indices specified positions. Defaults FALSE. NA.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create sparse logical vector — sparse_logical","text":"sparse logical vector","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_logical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sparse logical vector — sparse_logical","text":"values positions expected length, allowed zero length. Allowed values value logical values. Missing values NA NA_real_ allowed. Everything else disallowed, values also allowed take value default. positions integers integer-like doubles. Everything else allowed. Positions furthermore positive (0 allowed), unique, increasing order. Lastly smaller length. developers: setting options(\"sparsevctrs.verbose_materialize\" = TRUE) print message time sparse vector forced materialize.","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create sparse logical vector — sparse_logical","text":"","code":"sparse_logical(logical(), integer(), 10) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  sparse_logical(c(TRUE, NA, TRUE), c(2, 5, 10), 10) #>  [1] FALSE  TRUE FALSE FALSE    NA FALSE FALSE FALSE FALSE  TRUE  str(   sparse_logical(c(TRUE, NA, TRUE), c(2, 5, 10), 1000000000) ) #>  logi [1:1000000000] FALSE TRUE FALSE FALSE NA FALSE ..."},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mean from sparse vectors — sparse_mean","title":"Calculate mean from sparse vectors — sparse_mean","text":"Calculate mean sparse vectors","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mean from sparse vectors — sparse_mean","text":"","code":"sparse_mean(x, na_rm = FALSE)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mean from sparse vectors — sparse_mean","text":"x sparse numeric vector. na_rm Logical, whether remove missing values. Defaults FALSE.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mean from sparse vectors — sparse_mean","text":"single numeric value.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate mean from sparse vectors — sparse_mean","text":"function, helper functions assumes input x sparse numeric vector. done performance reasons, thus users responsibility perform input checking.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mean from sparse vectors — sparse_mean","text":"","code":"sparse_mean(   sparse_double(1000, 1, 1000) ) #> [1] 1  sparse_mean(   sparse_double(1000, 1, 1000, default = 1) ) #> [1] 1.999  sparse_mean(   sparse_double(c(10, 50, 11), c(1, 50, 111), 1000) ) #> [1] 0.071  sparse_mean(   sparse_double(c(10, NA, 11), c(1, 50, 111), 1000) ) #> [1] NA  sparse_mean(   sparse_double(c(10, NA, 11), c(1, 50, 111), 1000),   na_rm = TRUE ) #> [1] 0.02102102"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate median from sparse vectors — sparse_median","title":"Calculate median from sparse vectors — sparse_median","text":"Calculate median sparse vectors","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate median from sparse vectors — sparse_median","text":"","code":"sparse_median(x, na_rm = FALSE)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate median from sparse vectors — sparse_median","text":"x sparse numeric vector. na_rm Logical, whether remove missing values. Defaults FALSE.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate median from sparse vectors — sparse_median","text":"single numeric value.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate median from sparse vectors — sparse_median","text":"function, helper functions assumes input x sparse numeric vector. done performance reasons, thus users responsibility perform input checking.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate median from sparse vectors — sparse_median","text":"","code":"sparse_median(   sparse_double(1000, 1, 1000) ) #> [1] 0  sparse_median(   sparse_double(1000, 1, 1000, default = 1) ) #> [1] 1  sparse_median(   sparse_double(c(10, 50, 11), c(1, 50, 111), 1000) ) #> [1] 0  sparse_median(   sparse_double(c(10, NA, 11), c(1, 50, 111), 1000) ) #> [1] NA  sparse_median(   sparse_double(c(10, NA, 11), c(1, 50, 111), 1000),   na_rm = TRUE ) #> [1] 0"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standard diviation from sparse vectors — sparse_sd","title":"Calculate standard diviation from sparse vectors — sparse_sd","text":"Calculate standard diviation sparse vectors","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standard diviation from sparse vectors — sparse_sd","text":"","code":"sparse_sd(x, na_rm = FALSE)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standard diviation from sparse vectors — sparse_sd","text":"x sparse numeric vector. na_rm Logical, whether remove missing values. Defaults FALSE.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate standard diviation from sparse vectors — sparse_sd","text":"single numeric value.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_sd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate standard diviation from sparse vectors — sparse_sd","text":"function, helper functions assumes input x sparse numeric vector. done performance reasons, thus users responsibility perform input checking. Much like sd() uses denominator n-1.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate standard diviation from sparse vectors — sparse_sd","text":"","code":"sparse_sd(   sparse_double(1000, 1, 1000) ) #> [1] 31.62278  sparse_sd(   sparse_double(1000, 1, 1000, default = 1) ) #> [1] 31.59115  sparse_sd(   sparse_double(c(10, 50, 11), c(1, 50, 111), 1000) ) #> [1] 1.648841  sparse_sd(   sparse_double(c(10, NA, 11), c(1, 50, 111), 1000) ) #> [1] NA  sparse_sd(   sparse_double(c(10, NA, 11), c(1, 50, 111), 1000),   na_rm = TRUE ) #> [1] 0.470107"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance from sparse vectors — sparse_var","title":"Calculate variance from sparse vectors — sparse_var","text":"Calculate variance sparse vectors","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance from sparse vectors — sparse_var","text":"","code":"sparse_var(x, na_rm = FALSE)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance from sparse vectors — sparse_var","text":"x sparse numeric vector. na_rm Logical, whether remove missing values. Defaults FALSE.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variance from sparse vectors — sparse_var","text":"single numeric value.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate variance from sparse vectors — sparse_var","text":"function, helper functions assumes input x sparse numeric vector. done performance reasons, thus users responsibility perform input checking. Much like var() uses denominator n-1.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparse_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate variance from sparse vectors — sparse_var","text":"","code":"sparse_var(   sparse_double(1000, 1, 1000) ) #> [1] 1000  sparse_var(   sparse_double(1000, 1, 1000, default = 1) ) #> [1] 998.001  sparse_var(   sparse_double(c(10, 50, 11), c(1, 50, 111), 1000) ) #> [1] 2.718678  sparse_var(   sparse_double(c(10, NA, 11), c(1, 50, 111), 1000) ) #> [1] NA  sparse_var(   sparse_double(c(10, NA, 11), c(1, 50, 111), 1000),   na_rm = TRUE ) #> [1] 0.2210006"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparsevctrs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sparsevctrs: Sparse Vectors for Use in Data Frames — sparsevctrs-package","title":"sparsevctrs: Sparse Vectors for Use in Data Frames — sparsevctrs-package","text":"Provides sparse vectors powered ALTREP (Alternative Representations R Objects) behave like regular vectors, can thus used data frames. Also provides tools convert sparse matrices data frames sparse columns functions interact sparse vectors.","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparsevctrs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sparsevctrs: Sparse Vectors for Use in Data Frames — sparsevctrs-package","text":"Maintainer: Emil Hvitfeldt emil.hvitfeldt@posit.co (ORCID) contributors: Davis Vaughan davis@posit.co [contributor] Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparsevctrs_options.html","id":null,"dir":"Reference","previous_headings":"","what":"sparsevctrs options — sparsevctrs_options","title":"sparsevctrs options — sparsevctrs_options","text":"options can set options().","code":""},{"path":[]},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/sparsevctrs_options.html","id":"sparsevctrs-verbose-materialize","dir":"Reference","previous_headings":"","what":"sparsevctrs.verbose_materialize","title":"sparsevctrs options — sparsevctrs_options","text":"option meant used diagnostic tool. Materialization sparse vectors done silently default. can make hard determine code want. Setting sparsevctrs.verbose_materialize way alert materialization occurs. Note first materialization counted options , materialized vector cached. Setting sparsevctrs.verbose_materialize = 1 sparsevctrs.verbose_materialize = TRUE result message emitted time sparse vector materialized. Setting sparsevctrs.verbose_materialize = 2 result warning thrown time sparse vector materialized. Setting sparsevctrs.verbose_materialize = 3 result error thrown time sparse vector materialized.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/type-predicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse vector type checkers — type-predicates","title":"Sparse vector type checkers — type-predicates","text":"Helper functions determine whether vector sparse vector .","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/type-predicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse vector type checkers — type-predicates","text":"","code":"is_sparse_vector(x)  is_sparse_numeric(x)  is_sparse_double(x)  is_sparse_integer(x)  is_sparse_character(x)  is_sparse_logical(x)"},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/type-predicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse vector type checkers — type-predicates","text":"x value checked.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/type-predicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sparse vector type checkers — type-predicates","text":"single logical value","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/type-predicates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse vector type checkers — type-predicates","text":"is_sparse_vector() general function detects type sparse vector created package. is_sparse_double(), is_sparse_integer(), is_sparse_character(), is_sparse_logical() specific functions detects type. is_sparse_numeric() matches sparse integers doubles.","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/reference/type-predicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse vector type checkers — type-predicates","text":"","code":"x_sparse <- sparse_double(c(pi, 5, 0.1), c(2, 5, 10), 10) x_dense <- c(0, pi, 0, 0, 0.5, 0, 0, 0, 0, 0.1)  is_sparse_vector(x_sparse) #> [1] TRUE is_sparse_vector(x_dense) #> [1] FALSE  is_sparse_double(x_sparse) #> [1] TRUE is_sparse_double(x_dense) #> [1] FALSE  is_sparse_character(x_sparse) #> [1] FALSE is_sparse_character(x_dense) #> [1] FALSE  # Forced materialization is_sparse_vector(x_sparse[]) #> [1] FALSE"},{"path":"https://r-lib.github.io/sparsevctrs/dev/news/index.html","id":"sparsevctrs-development-version","dir":"Changelog","previous_headings":"","what":"sparsevctrs (development version)","title":"sparsevctrs (development version)","text":"Helper function sparse_dummy() beenn added. (#49) Helper functions sparse_mean(), sparse_var(), sparse_sd(), sparse_median() added. (#49) sparse vector types now significant smaller base object size. (#67) Fixed bug coerce_to_sparse_data_frame() coerce_to_sparse_tibble() didn’t work matrices fully sparse columns. (#69) coerce functions received call argument. (#72) Utility function has_sparse_elements() added. (#70) is_sparse_vector() rewritten speed improvement. (#76) Fixed bugs coerce_to_sparse_matrix() error completely sparse columns. (#77) coerce_to_sparse_matrix() Now turns dense zeroes sparse zeroes. (#77)","code":""},{"path":"https://r-lib.github.io/sparsevctrs/dev/news/index.html","id":"sparsevctrs-010","dir":"Changelog","previous_headings":"","what":"sparsevctrs 0.1.0","title":"sparsevctrs 0.1.0","text":"CRAN release: 2024-05-31 Initial CRAN submission.","code":""}]
